> TODO
	>> dam 部署
		>>> 使用的工具包和各个版本的部署
			solokit
			k8s-utils
			reporting-client   会收集系统信息发送到solo.io
	>> gateway 的编译环境
		>>> 如何做出现在的项目结构

> operator 开发需要注意的文件
	operator1service_controller.go Reconcile 函数作为回调的入口，是开发时最关注的
	main.go  启动文件，里面有服务端口地址的设置
	Operator1Service_types.go 里面有crd结构体的定义

> flycheck go-vet 报错
************************************************************
init.el 
------------------------------------------------------------
# ++++++++++
(let ((govet (flycheck-checker-get 'go-vet 'command)))
  (when (equal (cadr govet) "tool")
    (setf (cdr govet) (cddr govet))))
------------------------------------------------------------
************************************************************

> emacs golang 环境配置
	>> 安装
		>>> emacs插件
			go-mode  很多功能
			go-eldoc 代码释义
		>>> go 插件
			godef    代码函数释义和跳转 go get -u -v github.com/rogpeppe/godef
			gocode   代码函数释义       go get -u -v github.com/nsf/gocode
			golint   代码检查           go get -u -v golang.org/x/lint/golint			

	>> 使用
		函数释义 M-x godef-describe
		函数跳转 M-x godef-jump

> GO	 get install
	>> get
		go get 会下载特定版本的包到module ，update go mod文件，下载源码包到 module ，然后build和install。
		-t 让命令额外下载代码包中测试源码文件中依赖的代码包
		-u 命令利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包
		-insecure 允许命令程序使用非安全的scheme（如HTTP）去下载指定的代码包。如果你用的代码仓库（如公司内部的Gitlab）没有HTTPS支持，可以添加此标记。请在确定安全的情况下使用它
		-d  只下载代码包到src目录下，不编译和安装
	>> install
		go install 用来build 和install 包。将忽略 go mod 文件

> dlv 调试go
	go 调试工具dlv https://www.jianshu.com/p/7373042bba83
	>> 安装
------------------------------------------------------------
go get -u github.com/go-delve/delve/cmd/dlv
------------------------------------------------------------
	>> 使用
------------------------------------------------------------
# dlv 命令有一系列调试  下面是demo
dlv debug main.go
# 会进入dlv命令行
# help 列出dlv命令行指令
help
# continue   # 运行到下一个断点
# next       # 单步执行
# restart    # 重新运行程序
# stepout    # 跳出当前函数
						
# break $gofile:$line_no	 # 打断点
# bp											 # 列出断点

# quit                       退出
------------------------------------------------------------
		
> emacs 多行文本对齐
	emacs Wiki:   https://www.emacswiki.org/emacs/RegularExpression
	>> M-x align-regexp
		>>> 对齐 = 号
------------------------------------------------------------
M-x align-regexp RET =  这样所有 = 号会对齐
------------------------------------------------------------
		>>> 对齐 中间以 中文文本
------------------------------------------------------------
# 如下文本

# continue   运行到下一个s断点
# next       单步执行
# restart    重新运行程序
# stepout    跳出当前函数

M-x align-regexp RET [[:blank:]]#    这个将后面的井号对齐
M-x align-regexp RET [[:blank:]]\Ca  这个可以将中文和英文的对齐 [[:blank:]] 表示 空格或\t，\Ca表示中文
------------------------------------------------------------

> emacs tab \t 转 空格
	M-x untabify 即可

> emacs 光标跳转
	C-SPC C-SPC 说明 https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html#index-C_002dSPC-C_002dSPC
	>> C-SPC C-SPC
		C-SPC 是标记，但是也是选择区域的起始标记，第二个C-SPC 用于取消第一个 C-SPC，同时这个光标加入到光标环上
	>> C-u C-SPC
		根据光标环回退光标，会有终点；光标环是每个buffer都有的，所以没办法跨buffer 
		
