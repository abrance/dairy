> 版本控制方案（软件版本发布方案）
	>> 目的
		>>> 规范版本发布，提高软件发布质量
	>> 解决什么问题
		>>> 不同项目（project 为实际承担的业务项目 e.g. 招商局项目）间使用整体的版本混乱问题
		>>> 每一个项目（project） 使用的多个模块（module）间代码版本混乱问题
		>>> 一个模块间每个提交，不知道是 feature fix refactor 在代码前进时不敢确定的前进，在回退时也不敢确定的回退
	>> 解决方案
		>>> 不同项目间使用整体的版本混乱问题
			采用 branch  tag  项目文档解决
			>>>> branch 分支
				使用 git 分支进行发布的管理每次大版本的发布，将整个 软件（将一整套系统看作一个软件整体） 分裂为一个统一的分支（e.g. 发布第一个分支为 release-v1.0.2，每个项目文档中可以引用这个分支，这个分支事实上真实对应每个模块的同名分支），开发测试会对每一个分支维护或合并，每次维护和合并，项目经理等需要对项目文档进行更新
			>>>> tag 标记
				使用 git 标记进行每个分支发布的大小版本进行管理。如A公司使用release-v1.0.2，开发和测试人员将不断对 release-v1.0.2 分支维护，其间产生许多tag，每个tag 拥有tagname，tagname命名规范（e.g. release-v1.0.2.x.y x 的增长表示 加入小特性，y的增长表示fix 前面的bug），tag间有 fix feature refactor 等信息，A公司在使用过程中可以从这个tag中选择自己想要的tag进行升级、降级或不变。tag命名规则紧跟branch，如 branch 为 release-v1.0.2 ，底下的tag便为 release-v1.0.2.stable.1 release-v1.0.2.feature.2
			>>>> 项目文档（project）
				我们的软件定位应该是一个通用应用，不应该是只服务于某一个公司的定制应用（当然，定制也是支持的）。所以，我们软件也不应该存在任何项目信息。所有的项目信息应保存于项目文档中，包括引用的分支的名称，使用tag 的信息，并做好维护工作。
			>>>> 结论
				使用 branch tag 项目文档，能有效的定位到某公司使用我们的系统是哪个版本的，并可以持续获取到此分支的维护服务。
		>>> 每个项目使用多个模块间代码版本混乱问题
			我们的软件并没有使用一个统一的仓库（repo）管理，原因是，一个仓库进行统一的管理，代码树可能会很复杂，各个组件又是多语言的，不一定有协同性，而且不可能将所有代码版本控制起来。基于以上原因，我们将软件分为多个模块，各自使用不同仓库进行版本控制。但是这样的话，在软件发布版本时，不同模块间的版本会非常不一致，软件由各个模块组成，那么软件版本的命名规则和各个模块版本命名规则必定由一个多对多关系的比较复杂的结构。为了降低这个复杂度，我们采用发布版本时所有模块统一使用统一版本号，版本号的命令规范另见。
			>>>> 结论
				通过人为指定软件间不同模块建立相同分支，这样处理，（不使用额外说明）就可以通过某一个tag 追溯到某一个模块的某一版本的某一次tag（commit提交）上。
		>>> 一个模块的每一个提交，不知道是 feature fix refactor 在代码前进时不敢确定的前进，在回退时也不敢确定的回退
			现有的提交和提交信息没有规范化，正确的提交为每一次都只负责一个独立的任务（可能这个任务会解决多个问题，将解决的多个问题都写上也行）。为了提交规范化，也为了后期的自动化维护分支和版本前进回退的方便，我们确定提交的规范，提交信息必须以 feature fix refactor test note （可以补充）开头。这些信息，都会被参考，并补充到相应的tag信息。
			>>>> 结论
				通过规范每一次提交，在tag时能确定每个版本的具体改变，方便版本的前进和回退，也为以后做自动化做了准备
	>> 版本控制示意图				
------------------------------------------------------------
                       c
        ┌────────┐    ┌─┐   ┌─┐   ┌─┐   ┌─┐   ┌─┐
        │ master ├───►│ ├──►│ ├──►│ ├──►│ ├──►│ ├───►  ......
        └────────┘    └─┘   └┬┘   └─┘   └┬┘   └─┘
                       branch│           │
              release-v1.0.2 ▼           ▼
                            ┌─┐         ┌─┐
tag release-v1.0.2.1.0 ◄────┤ │         │ ├───►
                            └┬┘         └┬┘
                             │           │
                             ▼           ▼
                            ┌─┐         ┌─┐
                            │ │         │ │
                            └┬┘         └┬┘
                             │           │
                             ▼           ▼
                            ┌─┐
tag release-v1.0.2.1.1 ◄────┤ │         ...
tag msg "fix: xxxx"         └┬┘
                             │
                             ▼
                            ┌─┐
tag release-v1.0.2.2.1 ◄────┤ │
tag msg "feature: xxxx"     └┬┘
                             │
                             ▼

                            ...
------------------------------------------------------------



> 解决 ubuntu 系统 root 不能登录问题
------------------------------------------------------------
# 修改 /etc/ssh/sshd_config
#PermitRootLogin prohibit-password  这一行下面加上
PermitRootLogin yes   这一行
# 执行 systemctl restart sshd
------------------------------------------------------------

> 7.11
 >> 编译打包招商的 安装包
  >>> envoy 比对版本 1.11.1  打包md5 f59...  /repo/envoy/envoy-link.tar.gz md5 为 f59...   结论：相同
  >>> dam 比对版本 488  打包回退到 488   dam md5 bin 731... go.mod(使用最新 fedf6381eb996976a4d08b08ce38d503ed12d53e)  结论：打包后 731... 
  >>> webserver 比对版本 f7a
	>>> x-apigateway-web 38d
  >>> HA 比对版本 dc0
  >>> file-syncer c45
  >>> installer 657
 >> 打包位置 100.22 /backup/zsj/installer-release.tar.gz-0711_1628
> 7.11 第二次打包
	>> 招商局 安装包
		>>> envoy 比对版本 1.11.1  打包md5 f59...  /repo/envoy/envoy-link.tar.gz md5 为 f59...   结论：相同
		>>> dam 比对版本 488  打包回退到 488   dam md5 bin 731... go.mod(使用最新 fedf6381eb996976a4d08b08ce38d503ed12d53e)  结论：打包后 731... 
		>>> webserver release-v1.0.2分支 比对版本 3ce5ad9cd2897f9668bdd58ca1c3b09fcd60ff9f
		>>> x-apigateway-web a9f
		>>> HA 比对版本 dc0
		>>> file-syncer c45
		>>> installer 657
	>> 打包位置 installer-release.tar.gz-0711_1921

> install-npm10.14-debian.sh
------------------------------------------------------------
apt install -y make 
wget https://npm.taobao.org/mirrors/node/v10.14.1/node-v10.14.1-linux-x64.tar.gz
tar xzvf node-v10.14.1-linux-x64.tar.gz
mv node-v10.14.1-linux-x64 /usr/local/node
cat << EOF >> /etc/profile

export NODE_HOME=/usr/local/node
export PATH=\$PATH:\$NODE_HOME/bin

EOF
source /etc/profile
npm -v
------------------------------------------------------------
