> TODO
	gloo 运行起来
	jumpserver 设置请求转发，这样只需要配置一个证书
	前端luna所有请求(前端静态资源和请求的接口)都要改为 http://$ip/$target_ip

{"level":"info","ts":"2022-01-17T17:55:11.793+0800","logger":"gloo.v1.event_loop","caller":"v1/setup_event_loop.sk.go:57"d","version":"undefined"}
{"level":"fatal","ts":"2022-01-17T17:55:11.894+0800","logger":"gloo","caller":"setuputils/main_setup.go:73","msg":"error ap configuration: list did not find settings gloo-system.default","version":"undefined","stacktrace":"github.com/solo-io/.Main\n\t/opt/gloo-dev/pkg/utils/setuputils/main_setup.go:73\ngithub.com/solo-io/gloo/projects/gloo/pkg/setup.startSetupLects/gloo/pkg/setup/setup.go:22\ngithub.com/solo-io/gloo/projects/gloo/pkg/setup.Main\n\t/opt/gloo-dev/projects/gloo/pkg/ain\n\t/opt/gloo-dev/projects/gloo/cmd/main.go:14\nruntime.main\n\t/usr/local/go/src/runtime/proc.go:225"}

kubeadm init \
--image-repository registry.aliyuncs.com/google_containers \
--kubernetes-version="1.20.8" \
--service-cidr=10.96.0.0/12 \
--pod-network-cidr="10.244.0.0/16" \
--apiserver-advertise-address 192.168.0.139 \
--control-plane-endpoint 192.168.0.139 \
--token-ttl 0

> apt查询和安装指定版本的软件
	https://www.jianshu.com/p/87cccdab2d1f
	>> 软件包降级
	直接apt-get install $pkg_name=$pkg_version     version需要写全

> helm安装
************************************************************
history
------------------------------------------------------------
wget https://get.helm.sh/helm-v3.8.0-rc.1-linux-amd64.tar.gz
# helm3 不需要 tiller
------------------------------------------------------------
************************************************************

ORLaVjeDj8dVAWMq

go template

************************************************************
# 部署gloo
------------------------------------------------------------
cat > sysctl-patch.yaml <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-proxy
spec:
  template:
    spec:
      securityContext:
          sysctls:
          - name: net.netfilter.nf_conntrack_tcp_timeout_close_wait
            value: "10"
EOF
------------------------------------------------------------
************************************************************

> nginx
	>> centos安装nginx
************************************************************
# centos7 rpm安装
------------------------------------------------------------
rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
yum install -y nginx
------------------------------------------------------------
************************************************************
	>> server_name_in_redirect 
	用于内部重定向

> 正则表达式捕获
	>> 正则表达式机制的最后一个功能是能够捕获子表达式，放在圆括号"()"之间的任何文本，在被捕获后都能用于后面的匹配处理。下表列出一些例子以便于说明原理
	模式                                        字符串                   捕获
	^(hello|hi)(sir|mister)$                    hello sir            $1=hello  $2=sir
	^(.*)$                                      nginx rocks          $1=nginx rocks
	^(.{1,3})([0-9]{1,4})([?!]{1,2})$           abc1234?!            $1=abc  $2=1234  $3=!?


apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: discovery
  name: discovery
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
  name: gateway-proxy
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gateway
  name: gateway
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: gateway-resource-reader-default
rules:
- apiGroups:
  - gateway.solo.io
  resources:
  - virtualservices
  - routetables
  - virtualhostoptions
  - routeoptions
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - gateway.solo.io
  resources:
  - gateways
  verbs:
  - get
  - list
  - watch
  - create
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: gloo-graphqlschema-mutator-default
rules:
- apiGroups:
  - graphql.gloo.solo.io
  resources:
  - graphqlschemas
  - graphqlschemas/status
  verbs:
  - get
  - list
  - watch
  - update
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: gloo-resource-mutator-default
rules:
- apiGroups:
  - gloo.solo.io
  resources:
  - proxies
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: gloo-resource-reader-default
rules:
- apiGroups:
  - gloo.solo.io
  - enterprise.gloo.solo.io
  resources:
  - upstreams
  - upstreamgroups
  - proxies
  - authconfigs
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ratelimit.solo.io
  resources:
  - ratelimitconfigs
  - ratelimitconfigs/status
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - graphql.gloo.solo.io
  resources:
  - graphqlschemas
  - graphqlschemas/status
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: gloo-upstream-mutator-default
rules:
- apiGroups:
  - gloo.solo.io
  resources:
  - upstreams
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: kube-resource-watcher-default
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - secrets
  - endpoints
  - configmaps
  - namespaces
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: settings-user-default
rules:
- apiGroups:
  - gloo.solo.io
  resources:
  - settings
  verbs:
  - get
  - list
  - watch
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: gateway-resource-reader-binding-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gateway-resource-reader-default
subjects:
- kind: ServiceAccount
  name: gateway
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: gloo-graphqlschema-mutator-binding-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-graphqlschema-mutator-default
subjects:
- kind: ServiceAccount
  name: discovery
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: gloo-resource-mutator-binding-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-resource-mutator-default
subjects:
- kind: ServiceAccount
  name: gateway
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: gloo-resource-reader-binding-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-resource-reader-default
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: gloo-upstream-mutator-binding-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-upstream-mutator-default
subjects:
- kind: ServiceAccount
  name: discovery
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: kube-resource-watcher-binding-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-resource-watcher-default
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: default
- kind: ServiceAccount
  name: discovery
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: gloo
    gloo: rbac
  name: settings-user-binding-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: settings-user-default
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: default
- kind: ServiceAccount
  name: gateway
  namespace: default
- kind: ServiceAccount
  name: discovery
  namespace: default
---
apiVersion: v1
data:
  envoy.yaml: |
    layered_runtime:
      layers:
      - name: static_layer
        static_layer:
          overload:
            global_downstream_max_connections: 250000
          upstream:
            healthy_panic_threshold:
              value: 50
      - name: admin_layer
        admin_layer: {}
    node:
      cluster: gateway
      id: "{{.PodName}}.{{.PodNamespace}}"
      metadata:
        # role's value is the key for the in-memory xds cache (projects/gloo/pkg/xds/envoy.go)
        role: "{{.PodNamespace}}~gateway-proxy"
    static_resources:
      listeners:
        - name: prometheus_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8081
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: AUTO
                    stat_prefix: prometheus
                    route_config:
                      name: prometheus_route
                      virtual_hosts:
                        - name: prometheus_host
                          domains:
                            - "*"
                          routes:
                            - match:
                                path: "/ready"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                prefix: "/metrics"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                prefix_rewrite: /stats/prometheus
                                cluster: admin_port_cluster
                    http_filters:
                      - name: envoy.filters.http.router
      clusters:
      - name: gloo.default.svc.cluster.local:9977
        alt_stat_name: xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: gloo.default.svc.cluster.local:9977
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.default.svc.cluster.local
                    port_value: 9977
        http2_protocol_options: {}
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
      - name: rest_xds_cluster
        alt_stat_name: rest_xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: rest_xds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.default.svc.cluster.local
                    port_value: 9976
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
      - name: wasm-cache
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: wasm-cache
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.default.svc.cluster.local
                    port_value: 9979
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
      - name: admin_port_cluster
        connect_timeout: 5.000s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: admin_port_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 19000

    dynamic_resources:
      ads_config:
        transport_api_version: V3
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc: {cluster_name: gloo.default.svc.cluster.local:9977}
      cds_config:
        resource_api_version: V3
        ads: {}
      lds_config:
        resource_api_version: V3
        ads: {}
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 19000
kind: ConfigMap
metadata:
  labels:
    app: gloo
    gateway-proxy-id: gateway-proxy
    gloo: gateway-proxy
  name: gateway-proxy-envoy-config
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gateway-proxy-id: gateway-proxy
    gloo: gateway-proxy
  name: gateway-proxy
  namespace: default
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    gateway-proxy: live
    gateway-proxy-id: gateway-proxy
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    discovery.solo.io/function_discovery: disabled
    gloo: gateway
  name: gateway
  namespace: default
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    gloo: gateway
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: default
spec:
  ports:
  - name: grpc-xds
    port: 9977
    protocol: TCP
  - name: rest-xds
    port: 9976
    protocol: TCP
  - name: grpc-validation
    port: 9988
    protocol: TCP
  - name: wasm-cache
    port: 9979
    protocol: TCP
  selector:
    gloo: gloo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: discovery
  name: discovery
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: discovery
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
      labels:
        gloo: discovery
    spec:
      containers:
      - env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: START_STATS_SERVER
          value: "true"
        image: quay.io/solo-io/discovery:1.10.1
        imagePullPolicy: IfNotPresent
        name: discovery
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10101
      securityContext:
        fsGroup: 10101
      serviceAccountName: discovery
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gateway-proxy-id: gateway-proxy
    gloo: gateway-proxy
  name: gateway-proxy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      gateway-proxy-id: gateway-proxy
      gloo: gateway-proxy
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8081"
        prometheus.io/scrape: "true"
      labels:
        gateway-proxy: live
        gateway-proxy-id: gateway-proxy
        gloo: gateway-proxy
    spec:
      containers:
      - args:
        - --disable-hot-restart
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: quay.io/solo-io/gloo-envoy-wrapper:1.10.1
        imagePullPolicy: IfNotPresent
        name: gateway-proxy
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10101
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-config
      securityContext:
        fsGroup: 10101
        runAsUser: 10101
        sysctls:
        - name: net.netfilter.nf_conntrack_tcp_timeout_close_wait
          value: "10"
      serviceAccountName: gateway-proxy
      volumes:
      - configMap:
          name: gateway-proxy-envoy-config
        name: envoy-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gateway
  name: gateway
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gateway
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
      labels:
        gloo: gateway
    spec:
      containers:
      - env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: START_STATS_SERVER
          value: "true"
        - name: VALIDATION_MUST_START
          value: "true"
        image: quay.io/solo-io/gateway:1.10.1
        imagePullPolicy: IfNotPresent
        name: gateway
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 1
          periodSeconds: 2
          tcpSocket:
            port: 8443
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10101
        volumeMounts:
        - mountPath: /etc/gateway/validation-certs
          name: validation-certs
      serviceAccountName: gateway
      volumes:
      - name: validation-certs
        secret:
          defaultMode: 420
          secretName: gateway-validation-certs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gloo
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
      labels:
        gloo: gloo
    spec:
      containers:
      - env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: START_STATS_SERVER
          value: "true"
        image: quay.io/solo-io/gloo:1.10.1
        imagePullPolicy: IfNotPresent
        name: gloo
        ports:
        - containerPort: 9977
          name: grpc-xds
          protocol: TCP
        - containerPort: 9976
          name: rest-xds
          protocol: TCP
        - containerPort: 9988
          name: grpc-validation
          protocol: TCP
        - containerPort: 9979
          name: wasm-cache
          protocol: TCP
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 1
          periodSeconds: 2
          tcpSocket:
            port: 9977
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10101
        volumeMounts:
        - mountPath: /etc/gloo
          name: labels-volume
          readOnly: true
      serviceAccountName: gloo
      volumes:
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
        name: labels-volume
---
apiVersion: gateway.solo.io/v1
kind: Gateway
metadata:
  labels:
    app: gloo
  name: gateway-proxy-ssl
  namespace: default
spec:
  bindAddress: '::'
  bindPort: 8443
  httpGateway: {}
  proxyNames:
  - gateway-proxy
  ssl: true
  useProxyProto: false
---
apiVersion: gateway.solo.io/v1
kind: Gateway
metadata:
  labels:
    app: gloo
  name: gateway-proxy
  namespace: default
spec:
  bindAddress: '::'
  bindPort: 8080
  httpGateway: {}
  proxyNames:
  - gateway-proxy
  ssl: false
  useProxyProto: false
---
apiVersion: gloo.solo.io/v1
kind: Settings
metadata:
  labels:
    app: gloo
    gloo: settings
  name: default
  namespace: default
spec:
  discovery:
    fdsMode: WHITELIST
  discoveryNamespace: default
  gateway:
    readGatewaysFromAllNamespaces: false
    validation:
      allowWarnings: true
      alwaysAccept: true
      disableTransformationValidation: false
      proxyValidationServerAddr: gloo:9988
      validationServerGrpcMaxSizeBytes: 4000000
      warnRouteShortCircuiting: false
  gloo:
    disableKubernetesDestinations: false
    disableProxyGarbageCollection: false
    enableRestEds: false
    invalidConfigPolicy:
      invalidRouteResponseBody: Gloo Gateway has invalid configuration. Administrators
        should run `glooctl check` to find and fix config errors.
      invalidRouteResponseCode: 404
      replaceInvalidRoutes: false
    restXdsBindAddr: 0.0.0.0:9976
    xdsBindAddr: 0.0.0.0:9977
  kubernetesArtifactSource: {}
  kubernetesConfigSource: {}
  kubernetesSecretSource: {}
  refreshRate: 60s
---
# Source: gloo/templates/6.5-gateway-certgen-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
  name: certgen
  namespace: default
---
# Source: gloo/templates/6.5-gateway-certgen-job.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-gateway-secret-create-vwc-update-default
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations"]
  verbs: ["get", "update"]
---
# Source: gloo/templates/6.5-gateway-certgen-job.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-gateway-secret-create-vwc-update-default
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
subjects:
- kind: ServiceAccount
  name: certgen
  namespace: default
roleRef:
  kind: ClusterRole
  name: gloo-gateway-secret-create-vwc-update-default
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/templates/6.5-gateway-certgen-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: gloo
    gloo: gateway-certgen
  name: gateway-certgen
  namespace: default
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        gloo: gateway-certgen
    spec:
      serviceAccountName: certgen
      restartPolicy: OnFailure
      containers:
        - image: quay.io/solo-io/certgen:1.10.1
          imagePullPolicy: IfNotPresent
          name: certgen
          securityContext:
            runAsNonRoot: true
            runAsUser: 10101
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:

            - "--secret-name=gateway-validation-certs"
            - "--svc-name=gateway"
            - "--validating-webhook-configuration-name=gloo-gateway-validation-webhook-default"
  # this feature is still in Alpha, which means it must be manually enabled in the k8s api server
  # with --feature-gates="TTLAfterFinished=true". This flag also works with minikube start ...
  # if the feature flag is not enabled in the k8s api server, this setting will be silently ignored at creation time
  ttlSecondsAfterFinished: 60
---
# Source: gloo/templates/5-gateway-validation-webhook-configuration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: gloo-gateway-validation-webhook-default
  labels:
    app: gloo
    gloo: gateway
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
webhooks:
- name: gateway.default.svc  # must be a domain with at least three segments separated by dots
  clientConfig:
    service:
      name: gateway
      namespace: default
      path: "/validation"
    caBundle: "" # update manually or use certgen job or cert-manager's ca-injector
  rules:
  - operations: [ "CREATE", "UPDATE", "DELETE" ]
    apiGroups: ["gateway.solo.io"]
    apiVersions: ["v1"]
    resources: ["*"]
  - operations: [ "CREATE", "UPDATE", "DELETE" ]
    apiGroups: ["gloo.solo.io"]
    apiVersions: ["v1"]
    resources: ["upstreams"]
  - operations: [ "DELETE" ]
    apiGroups: ["gloo.solo.io"]
    apiVersions: ["v1"]
    resources: ["secrets"]
  sideEffects: None
  matchPolicy: Exact
  admissionReviewVersions:
    - v1beta1 # v1beta1 still live in 1.22 https://github.com/kubernetes/api/blob/release-1.22/admission/v1beta1/types.go#L33
  failurePolicy: Ignore


----


gloo获取初始配置
************************************************************
history
------------------------------------------------------------
# https://github.com/solo-io/gloo/releases 获取glooctl 二进制文件
# 机器可以连接外网的情况下运行下面命令
# --dry-run  Dump the raw installation yaml instead of applying it to kubernetes  获取到所有yaml文件
./glooctl install gateway --dry-run
------------------------------------------------------------


# export POD_NAMESPACE=gloo-system
# gloo初始crd 配置，apply后可以正常启动
------------------------------------------------------------
apiVersion: gloo.solo.io/v1
kind: Settings
metadata:
  labels:
    app: gloo
    gloo: settings
  name: default
  namespace: gloo-system
spec:
  gloo:
    xdsBindAddr: "0.0.0.0:9977"
    restXdsBindAddr: "0.0.0.0:9976"
    enableRestEds: false
    invalidConfigPolicy:
      invalidRouteResponseBody: Gloo Gateway has invalid configuration. Administrators should
        run `glooctl check` to find and fix config errors.
      invalidRouteResponseCode: 404
      replaceInvalidRoutes: false
    disableKubernetesDestinations: false
    disableProxyGarbageCollection: false
  discoveryNamespace: gloo-system
  kubernetesArtifactSource: {}
  kubernetesConfigSource: {}
  kubernetesSecretSource: {}
  refreshRate: 60s

  gateway:
    readGatewaysFromAllNamespaces: false
    validation:
      proxyValidationServerAddr: "gloo:9988"
      alwaysAccept: true
      allowWarnings: true
      disableTransformationValidation: false
      warnRouteShortCircuiting: false
      validationServerGrpcMaxSizeBytes: 4e+06
  discovery:
    fdsMode: WHITELIST
------------------------------------------------------------
************************************************************
