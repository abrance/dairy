> 肉嫩的机制与技巧
	>> 肉变嫩的方法，一共有两个大类
		>>> 通过补水/减少水分流失，让肉变得软嫩多汁
			>>>> 补水
				以做一道蚝油牛肉为例. 把肉按你所想的切好（切片，切丝），放入一个碗里面, 加入你需要腌制的调味料，比如依次加入蚝油，酱油，盐。（如果要过油，可以搅拌过后，按照一斤肉配半个全蛋液，和少量生粉来加入,搅 拌一下，看到蚝油 ，酱油，都吸干以后，加入清水（一般一斤肉配2-3汤匙的水，调味越咸相对需要水的量越多，注意每加一汤匙的水，你就搅拌一会，直到你发现肉不再是干巴巴，稍微有点点水出来为止）
		  >>>> 保水
			除掉补水以外，最重要的就是保水。而我们最常见的方法就是――裹粉。裹粉的原理非常简单，那就是在肉的表面快速形成一层保护膜，避免水分流失。（因为我们做菜里面用到的各种粉，都可以在加热后迅速凝固，形成一层和肉不相关的膜，把肉汁保护在里面。）至于粉的种类有非常多种，地瓜粉，葛粉，土豆粉，玉米粉，等等，不同的粉用途不一，粘性不一。我就不详细解释了，实在不会区分的话，我一般用太白粉，也就是马铃薯粉/土豆粉，他可以解决大部分的勾芡和裹粉问题。比如技巧1里的蚝油牛肉，你就可以在搅拌到最后，加够水以后，给加上一点粉，然后继续拌，让牛肉表面形成保护膜，让牛肉变得更加软嫩
			>>>> 缩短烹饪时间
			除了补水和保水以外，缩短烹饪时间也非常关键。因为烹饪时间越长，跑掉的水分就越夸张。（所有肉类都非常明显）而缩短烹饪时间的最佳方法，就是提升烹饪温度，而在厨房里面，最为常见的，一般就两个方法――高压锅以及过油。由于高压锅我并不熟悉，我着重讲过油吧。请注意，过油和油炸没有直接关系。过油的主要目的还是在最短的时间内让肉受热均匀，快速在表面形成保护膜，锁住肉汁。因此，过油时间往往非常短（比如上述的蚝油牛肉，只需要在180度油温10秒就足够了），裹粉的厚度也非常薄，所以捞起来的时候，牛肉也仅仅只有3-5分熟，还需要再次下锅翻炒一下。如果你不知道温度，一般而言，蔬菜的温度是	140-160度。肉菜是160-200度之间。时间一般都在10秒到30秒之间，看你菜的厚度来决定，越厚时间越久。
			而区分油温的方法，最简单的就是拿一双木筷子，把筷子头稍微沾湿以后，插入热油里140度以下：有细小的泡泡在筷子表面，几乎不浮起来140-160度：有细小泡沫，并且会飘上油的表面160-180度：泡沫变大，加大上浮速度180-200度：泡沫变得非常大，而且气泡不断往外跑200+：油差不多该冒烟了
		>>> 通过物理方法改变肉的纤维，让肉变得容易咀嚼
			>>>> 破坏肉的肌肉纤维
				>>>>> 断筋
				>>>>> 锤肉
			>>>> 大幅增加烹调时间
			前面说了，缩短烹调时间可以让肉很好的保住水分。而大幅增加烹调时间，则是对应的特殊的部位――比如说牛展，牛腩，牛腱，猪五花肉这类型。通过久煮让肉变酥变软，并且跑掉的肉汁重新“煮进去”。

> generatedDesiredProxies(ctx context.Context, snap *v1.ApiSnapshot) reconciler.GeneratedProxies
	>> 概述
		gateway 新的转换过程： 将 ng_name 相同的 GW 合并组装成大的 Listeners 保存到 Proxy 中，最终生成 map ng_name:proxy
	>> 返回值 reconciler.GeneratedProxies
		>>> type GeneratedProxies map[Proxy]reporter.ResourceReports  map, Proxy:ResourceReports
			>>>> Proxy {Listeners}
			>>>> ResourceReports map[resources.InputResource]Report  map, InputResource:Report
				InputResource {Resource}   作为crd输入的资源 GW VS 等
				Report {Warning []string, Errors error}  状态
	>> 函数体
		>>> GatewaysByNGName(gateways GatewayList) map[string]GatewayList 返回map，把 gateway 中 ng_name 拿出来，作为 ng_name: GWS 中 的键
			e.g. GW1:[NG1, NG2] GW2:[NG1] GW3:[NG2] -> NG1:[GW1, GW2] NG2:[GW1, GW3]
		>>> 遍历 map
		>>> Translate(ctx context.Context, ngName, namespace string, snap ApiSnapshot, gatewaysByNG GatewayList) (Proxy, ResourceReports)  将 snap 和 gatewaysByNG 组装成了 listeners 由 Proxy 保存
			>>>> filterGateways(gateways GatewayList, namespace string) GatewayList  根据 gateway 所属的 namespace 来 决定 是否把它加入到这个 gateway 集合，如果设置了都取所有的 gateway 就全部加进来
			>>>> Accept(res ...InputResource) ResourceReports 接收GW VS 资源的报告，最后生成一个树形的结构，任何一层级发生异常，可以快速定位
			>>>> validateGateways(gateways GatewayList, virtualServices VirtualServiceList, reports ResourceReports)  校验同一NG中的 GW中的 Listener 是否 端口重叠
			>>>> 遍历 同一NG 的GWS listeners
			>>>> GenerateListener(ctx context.Context, ngName string, snap ApiSnapshot, filteredGateways Gateway, reports ResourceReports) []Listener 将每个 servers 组装成了 Proxy listener对象
				>>>>> 遍历 gw，继续遍历 gwListener
				>>>>> validateServers(ctx Context, servers []GWServer, listener Listener, reports []ResourceReporters) 校验一个listener下 server的 sni 是否重叠，校验 没有 ssl 配置的 server 是否数量超过1（server 间通过 sni 进行匹配的）
				>>>>> GenerateServer(ctx Context, snap ApiSnapshot, server []GWServer, report []ResourceReporters) ([]Server, error)  遍历GWServer，每个 GWServer生成一个 server 对象
					>>>>>> GetVirtualServicesForServer(server GWServer, virtualServices VirtualServiceList) (VirtualServiceList, error) 获取这个 Server 的 VS 对象
					>>>>>> validateVirtualServiceDomains(server GWServer, virtualServices VirtualServiceList, reports reporter.ResourceReports)  因为envoy需要通过domain进行 VH匹配，把 domain 重复的 VS 取出来，将 domain 和 VS 都取出来，报告异常
					>>>>>> desiredServerForHttp(virtualServices VirtualServiceList, reports ResourceReports) []VirtualHost 把同一server下的 VS组装为 VH 并作为列表 组装为一个Proxy server 对象
						>>>>>>> virtualServiceToVirtualHost(vs VirtualService, reports ResourceReports) (VirtualHost, error)  通过 VS 组装 VH 对象（放弃路由表组件）（是否需要路由短路提醒功能）
							>>>>>>>> validateRoute(vs VirtualService, reports ResourceReporters)  mytodo 验证 Route 的匹配是否合法（包括正则表达式语法的验证等，这里不进行重叠的验证，因为Route完全可以重叠，重叠后只会按照先来后到执行，第二次就不会走到这个路由的）
							>>>>>>>> generateRoute(vs VirtualService, reports ResourceReporters) ([]Route, error)  根据VS生成 RouteList 对象
								getVSRoute(vs VirtualService, reports ResourceReporters)  RouteList 获取 VS 中的 Route 对象
								遍历 VSRoute 组装 Route
								mytodo RouteMapConfig 怎么获取
							>>>>>>>> getVSFilter(vs VirtualService) FilterMap  取 map，获取插件实例protobuf.any 的配置（调用插件的函数生成的）map<string, google.protobuf.Any> typed_per_filter_config
							>>>>>>>> VH{} 根据 VS 配置 filterMap  Routes 组装 VH 对象 
						>>>>>>> VHList{} 根据 GWServer option 和 VH 组装 Proxy server 对象
					>>>>>> Server{}	 组装为Server，进一步组装为 ServerList
				>>>>> Listener{}  根据ListenerOptions servers 地址端口组装为 Proxy listener 对象 进一步组装为 ListenerList
			>>>> Proxy{}  由Proxy Listeners 组装为 Proxy



> emacs lisp 学习
	>> interactive
		>>> https://www.jianshu.com/p/65b271c1dabf
		>>> 注意interactive 后面的参数 s r 等有不同含义
------------------------------------------------------------
(defun hello2 (name)
	"NAME Search."
	(interactive "sinput name: ")
	(message "hello! %s" name))

(defun hello3 (name)
  "Say NAME hello to a person."
  (interactive "sPlease input person name: ")
  (message "Hellox, %s!" name))

------------------------------------------------------------
	>> defvar setq 区别 defvar setq 都用于变量赋值， defvar 有两个特性，defvar 的变量如果有值，将什么都不做，defvar 允许加入一个附加的 doc
