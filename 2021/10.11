TODO
#### 设计并实现一个简单的存储资源分配系统

实现一个服务，该服务可以接收用户端请求，为用户申请 MySQL 与 Redis 两类资源。分配给用户的资源实例必须是真实、可以连接使用的。用户可以通过接口查看分配给自己的资源配置信息。

- 服务以 HTTP REST API 的方式提供接口，部分示例发送接口：

- 申请一个新的 MySQL/Redis 资源实例
- 查看某个实例的配置信息
- MySQL、Redis 服务可以在服务端用 Docker 容器启动，也可以使用其他方式
- 分配出的不同实例之间需要避免端口等资源冲突
- 资源的连接、鉴权等信息应该随机生成，部分必须的信息
- MySQL 连接地址、数据库名称、用户号、密码
- Redis 连接地址、密码

加分项：

- 完整的项目架构图、项目安装、使用以及 README 文档
- MySQL 与 Redis 实例支持不同的个性化配置，比如：
- Redis 可以由用户设置数据最大占用空间
- MySQL 可以由用户设置数据库字符集

> TODO
	>> docker 网络
	>> docker 文件映射

> docker 书籍
	>> https://jiajially.gitbooks.io/dockerguide/content/chapter_fastlearn/dockerfile_details.html
	>> https://haicoder.net/docker/docker-exec.html

> docker 设置容器名
	>> docker run --name $container_name 创建容器时--name参数即可
	>> 已创建重命名 docker rename $container_id $new_name 即可

> redis设置最大占用内存
	>> https://www.cnblogs.com/cheyunhua/p/9068029.html
	>> echo "maxmemory 268435456" >> /etc/redis.conf   // B为单位

> sqlalchemy func.min
	>> 查询最小值
************************************************************
查最小可用的port
------------------------------------------------------------
with self.session_scope() as session:
		# 由系统在资源池中分配ip port等资源
		min_port = session.query(func.min(ResourcePool.port)).filter(
				ResourcePool.is_used == 0
		)
...
------------------------------------------------------------
************************************************************

> docker 通过镜像运行容器
	docker run $image:[$tag]

> docker 进入容器执行命令
	>> 单行命令
		 >>> docker exec $container_name $cmd
	>> 交互式命令行
		 >>> docker exec -it $container_name bash
		 >>> exit # 退出

> docker 管理容器
	>> docker start $container_id # container id 和 name 都可以
	>> docker stop $container_id
	>> docker restart $container_id

> python执行shell命令并返回结果
> https://blog.csdn.net/baidu_36943075/article/details/105681683
************************************************************
------------------------------------------------------------
import subprocess

def subprocess_popen(statement):
    """
    执行shell命令，并返回结果
    :param statement:
    :return:
    """
    p = subprocess.Popen(statement, shell=True, stdout=subprocess.PIPE)  # 执行shell语句并定义输出格式
    while p.poll() is None:
        # 判断进程是否结束（Popen.poll()用于检查子进程（命令）是否已经执行结束，没结束返回None，结束后返回状态码）
        if p.wait() is not 0:
            # 判断是否执行成功（Popen.wait()等待子进程结束，并返回状态码；如果设置并且在timeout指定的秒数之后进程还没有结束，将会抛出一个TimeoutExpired异常。）
            logger.error("命令执行失败，请检查设备连接状态")
            return False
        else:
            re = p.stdout.readlines()  # 获取原始执行结果
            result = []
            for i in range(len(re)):  # 由于原始结果需要转换编码，所以循环转为utf8编码并且去除\n换行
                _res = re[i].decode('utf-8').strip('\r\n')
                result.append(_res)
            return result
------------------------------------------------------------
************************************************************

flask 不应该可以使用子进程才对

> mysql5.7创建用户并授权
	>> https://blog.csdn.net/qq_15124723/article/details/82456798
	>> CREATE USER '$username'@'%' IDENTIFIED BY '$password';   # 创建用户密码，%表示远程访问的域。
	>> GRANT ALL ON *.* TO '$username'@'%';  # *.* 所有的数据库和表的权限都开通

> mysql5.7 设置字符集
	>> https://www.jianshu.com/p/01194bc1855e

> 安装redis5.0.3
************************************************************
redis.service
------------------------------------------------------------
[Unit]
Description=redis-server
After=network.target

[Service]
Type=forking
ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf
PrivateTmp=true

[Install]
WantedBy=multi-user.target
------------------------------------------------------------
install-redis.sh
------------------------------------------------------------
yum install -y gcc
# 下载 redis压缩包，这一步可能出错。用华为云下载到本地后scp过来的，等我自己搞一个服务
wget http://download.redis.io/releases/redis-5.0.3.tar.gz

tar -zxvf redis-5.0.3.tar.gz
cd redis-5.0.3
make && make install PREFIX=/usr/local/redis

# 拷贝 redis.conf
cp redis.conf /usr/local/redis/bin
sed -i '/daemonize no/s/daemonize yes' /usr/local/redis/bin/redis.conf

# 将 redis 的命令放到PATH
# 匹配包含 PATH=$PATH:$HOME 这一行，并在后面添加 PATH=$PATH:/usr/local/redis/bin
sed -i '/PATH=$PATH:$HOME/a\PATH=$PATH:/usr/local/redis/bin' /root/.bash_profile
source /root/.bash_profile

# 做成redis服务
if [ -f "/etc/systemd/system/redis.service" ]
  then
    rm /etc/systemd/system/redis.service -f
fi
cp ./redis.service /etc/systemd/system/

systemctl start redis
------------------------------------------------------------
************************************************************
