emacs	
> F11 emacs 最大化|小化 窗格 小化的窗格可以跨屏移动
> U dired-mode  去除所有文件标记

> tlsInspector 算法
	server.length > 1 and server.sslconfig != none 就为此 listener 设置 tlsinspector

> 为什么不要 gloo 的 report
	>> gloo 日志机制
		gloo 日志机制是类似 k8s 的，会出现两种情况的异常，第一种为执行异常：当发布一个任务时，任务执行失败；第二种为回调异常：任务正常执行，但是任务里面的进程出现异常，这种异常属于任务开发人员意料之中的；gloo 本身依靠 k8s 系统，所以使用这种机制是非常合理的。
	>> gloo report
		gloo report 针对上面的日志机制，做了非常好的适配：对于应用级异常，使用 ctx 机制进行日志输出，并将程序退出；对于 gloo 的业务方面异常，采用 report 进行收集错误信息，为了定位到某一个具体的配置项发生的具体异常，report 将 gw vs upstream proxy(包括 vh route) route 等各个层级的每个对象都实例了一个 report 结构体，当出现异常时，在对应结构体中加入异常信息；在此基础上，实现了一个report 服务???
	>> DAM 项目所需要的日志
		>>> DAM 项目在异常处理上与 gloo 有很大的不同
			>>>> 异常机制
				DAM 项目在设计上不依赖 k8s 环境，一期的目标是为网络运维人员提供 web 应用，所有的接口应该为响应式的逻辑（用户发布的配置项信息出现不可用的情况，在校验配置项的时候，直接返回相应的msg，并且将请求驳回（请求不会到达 controller））
			>>>> 异常日志设计
				>>>>> 思路
					针对上面叙述的异常机制，应该采用基于文件的，分层的，日志系统进行日志管理。
				>>>>> 日志层级结构
------------------------------------------------------------
root
└── logs
    ├── dam
    │   └── controller
    │       └── 4-12.log
    └── gateway
        ├── controller
        │   └── 4-12.log
        └── webhook
            └── 4-12.log
------------------------------------------------------------
					
> 应该使用复制 tree 出来的目录结构进行目录结构的表达


> envoy routeAction 配置
