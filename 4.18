> TODO
	dam 层转换的文档
	测试 目标：使用 json 来测 最后要能根据页面的配置生成对应 envoy 配置
	日志（异常处理机制）
	插件的文档

> hack
	>> 概述
		使用一个工具进行配置自动生成 cobra 做
	>> deploy
		>>> 自动生成 settings.yaml  等配置文件

> DAM 测试设计
	>> 测试点
		>>> 单元测试
			>>>> 放在各个模块下
				>>>>> 主要业务单元测试
					>>>>>> translator package
						>>>>>>> translator
						>>>>>>> listener
						>>>>>>> route_config
						>>>>>>> clusters
				>>>>> 非主要业务单元测试
					>>>>>> syncer package
						>>>>>>> 
		>>> 功能测试
			>>>> 放在项目路径 test 目录下
		>>> 基准测试
			>>>> 放在项目路径test 目录下

err 写法至少包含
出错的函数：错误类型：上下文，异常信息
如果报错是从底下的函数传上来的，则可以不用传上下文

如果后果是配置项为 nil 这种程度，就不用 return ，如果后果是会生成一个零值，后面有函数依赖这个零值，并且产生副作用，则一定要 return ，不然会使程序崩溃。


> syncEnvoy(ctx Context, snap ApiSnapshot, allReports ResourceReports) error 转换入口
	>> Accept() report  report导入
	>> 遍历 snap.proxyList 
	>> Translate(params Params, proxy Proxy) 转换逻辑
	>> validateReport(reports Reports)   校验 report 如果有错则丢弃
	>> computeProxyKey 获取proxy key 在 ng name中
	>> xdsCache.SetSnapshot(key ProxyKey, snapshot EnvoySnapshot) error  保存snapshot 在 xdscache中 ；proxy 是转换一个同步一个

> Translate(params Params, proxy Proxy) （Snapshot,  reports Reports,  error）  dam 层转换逻辑
	>> MakeReport(proxy *v1.Proxy) MakeReport 以一棵树的方式组织一个 proxy report
	>> computeCluters(params plugins.Params, proxy *v1.Proxy, reports reporter.ResourceReports) []*envoy_config_cluster_v3.Cluster 为每个 proxy 计算 cDS，这里使用upstream 进行 cDS 的生成
	>> computeRouteconfigurations(params plugins.Params, proxy *v1.Proxy, reports reporter.ResourceReports) []*envoy_config_route_v3.RouteConfiguration 
	>> computeListeners(params plugins.Params, proxy *v1.Proxy, reports reporter.ResourceReports) []*envoy_config_listener_v3.Listener
	>> generateXdssnapshot(clusters []*envoy_config_cluster_v3.Cluster,	routeConfigs []*envoy_config_route_v3.RouteConfiguration,	listeners []*envoy_config_listener_v3.Listener,) envoycache.Snapshot 根据三种资源组装 xdssnapshot
	>> GetProxyError(proxyRpt *validation.ProxyReport) error GetProxyError 这里将 proxy 中的 proxyReport 进行汇总

> dam 层对象转换设计
	>> 概述
		dam 层对象为 Proxy plugin pluginInstance tlsCert tlsCertValidation upstream upstreamGroup 需要转换为 xDS 的 lDS rDS cDS 对象
	>> 转换代码设计
		主动分为三层对应三个对象lDS rDS cDS 的生成
************************************************************
Proxy upstream -> cDS
------------------------------------------------------------
> ComputeClusters(params plugins.Params, proxy *v1.Proxy, reports reporter.ResourceReports) []*envoy_config_cluster_v3.Cluster 为每个 proxy 计算 cDS
	>> computeClusterForUpstream(params plugins.Params, upstream *v1.Upstream, reports reporter.ResourceReports) *envoy_config_cluster_v3.Cluster  为单个 upstream 计算 cluster
		>>> // validateUpstream(upstream Upstream, reports Reports)   校验 upstream endpoint 是否存在??? 需要校验什么
		>>> computeCircuitbreakers(upstream *v1.Upstream, reports reporter.ResourceReports) *envoy_config_cluster_v3.CircuitBreakers 计算并组装 (Connpoll ->) circuitbreakers 
		>>> computeLoadAssignment(upstream *v1.Upstream, reports reporter.ResourceReports) *envoy_config_endpoint_v3.ClusterLoadAssignment 计算并组装 loadAssignment  lbEndpoint (静态导入)  (外层)HealthcheckConfig lb_alg -> lb_policy sslconfig -> transportsocket
		>>> computeCDSTls(upstream *v1.Upstream, params plugins.Params, reports reporter.ResourceReports) *envoy_config_core_v3.TransportSocket []transportSocket  TlsClient配置客户端的证书，三种模式对应三种 类型的的transportSocketTls: Disable: rawBuffer, Simple: commonTlsContext, Mutual: commonTlscontext(双向认证)
		>>> computeHealthCheck(upstream *v1.Upstream, reports reporter.ResourceReports) []*envoy_config_core_v3.HealthCheck  为单个 upstream 计算 hc
------------------------------------------------------------

Proxy httpServer.VHList VH Route upstreamGroup -> rDS
------------------------------------------------------------
> computeRouteconfigurations(params plugins.Params, proxy *v1.Proxy, proxyReport *validationapi.ProxyReport) []*envoy_config_route_v3.RouteConfiguration 计算一个 proxy rds
	>> computeRCName(index int, listener *v1.Listener) string  为 server 生成 routeConfig Name
	>> ComputeRouteConfiguration(params plugins.Params, server *v1.Server, rcName string, serverReport *validationapi.ServerReport) *envoy_config_route_v3.RouteConfiguration  为单个 server 计算出一个 RouteConfiguration
		>>> computeVirtualHostsForHttpServer(params plugins.Params, httpserver *v1.HttpServer, httpReports *validationapi.HttpServerReport) []*envoy_config_route_v3.VirtualHost  VHOptions 里面所有字段都在 VH 中，只需要填充 VHList 即可，计算并组装 envoy VHList 
			>>>> ValidateVirtualHostDomains(vhList VirtualHostList, reports Reports)  校验 VHList 的 domain 是否重叠
			>>>> computeVirtualHost(params plugins.Params, vh *v1.VirtualHost, vhReports *validationapi.VirtualHostReport) *envoy_config_route_v3.VirtualHost 计算VH 的插件配置，组装 VH name domains Routes
				>>>>> ComputeEnvoyRoutes(params plugins.Params, vh *v1.VirtualHost, vhReport *validationapi.VirtualHostReport) []*envoy_config_route_v3.Route 组装 RouteList
					>>>>>> ComputeEnvoyRoute(route *v1.Route, routeRpt *validationapi.RouteReport) []*envoy_config_route_v3.Route   route 比较特殊，其他的对象为一一对应，而 route - v3.Route是 1对多关系，因为 envoy route match 是单个对象，而 dam route 是多个match组成的，所以 matchers 的长度决定了最后生成 route 的数量，route 可以重名
						>>>>>>> damMatcherToEnvoyMatcher(matchers []*dammatchers.Matcher) ([]*envoy_config_route_v3.RouteMatch, error)  dam 层 matcher -> envoy Matcher ; 对 route 进行拆分，因为 envoy route 匹配是单独的，而 dam route 匹配是聚合的; name
					>>>>>> setAction(params plugins.Params, route *v1.Route, envoyRoute *envoy_config_route_v3.Route) error 为生成的每个 route 创建 Action
					>>>>>> setHeader(header *headers.HeaderManipulation, envoyRoute *envoy_config_route_v3.Route) error  为route 组装 header 相关字段
					>>>>>> computeRouteConfig  计算 route 级别插件配置，以供 HttpFilterChain 使用 
				>>>>> computeVHFilterConfigChain  计算 VH 级别插件配置 ，以供 HttpFilterChain使用 
------------------------------------------------------------

Proxy listener server httpserveroptions -> lDS
------------------------------------------------------------
> computeListeners(params plugins.Params, proxy *v1.Proxy, proxyReport *validationapi.ProxyReport) []*envoy_config_listener_v3.Listener  为一个 proxy 计算 lDS
	>> computeListener(params Params, proxy Proxy, reports Reports) []v3.Listener(params plugins.Params, listener *v1.Listener, listenerReport *validationapi.ListenerReport) *envoy_config_listener_v3.Listener 计算并组装 listener
		>>> computeFilterChains(params plugins.Params, listener *v1.Listener, listenerReport *validationapi.ListenerReport) []*envoy_config_listener_v3.FilterChain 为单个 listener 计算 FCList，因为一个 listener 对应多个 Server，所以 v3.Listener 下有多个 FC
			>>>> computeFilterChain  FilterChain 一个server 对应一个 FC，为单个 server 计算 FC，因为 一期没有网络过滤器，所以一个 FC下只有一个 filter 为 hcm 类型
				>>>>> computeFilterChainWithSSL(params plugins.Params, rcName string, server *v1.Server, serverReport *validationapi.ServerReport) *envoy_config_listener_v3.FilterChain 为配置 ssl 的 server 计算 FC
					>>>>>> computeTransportSocket(params plugins.Params, sslConfig *v1.TlsServer, serverReport *validationapi.ServerReport) *envoy_config_core_v3.TransportSocket 计算 用于指定 ssl 的 transportSocket
					>>>>>> computeFilter(params plugins.Params, rcName string, server *v1.Server, serverReport *validationapi.ServerReport) []*envoy_config_listener_v3.Filter 这里定义为数组是为了后期扩展，这里抽象 tcpServer 和 httpServer，到后面有网络层过滤器，会成成多个 filter，暂时将返回一个 Filter 数组，但是里面只有一个 hcm 对象
						>>>>>>> computeHttpConnectionManager(params plugins.Params, rcName string, httpServer *v1.HttpServer, httpserverReport *validationapi.HttpServerReport) *envoy_extensions_filters_network_http_connection_manager_v3.HttpConnectionManager 为 httpServer 计算 hcm hcm配置用算法实现 filter typed_config 使用hcm , HttpServerOptions HttpConnectionManagerSettings ->hcm下的options; HttpServeroptions grpc_web -> hcm.httpfilter.typed_config ; HttpServeroptions healthcheck -> hcm.httpfilter.typed_config ; 其他的对号入座
							>>>>>>>> computeHCMRDS  v3.rdsName 计算 hcm rds 字段 这个由自己人为规定一个生成 rdsname 算法(这里是从 computeFilterChains 这层对 listener 进行计算生成的)
							>>>>>>>> computeHttpFilters(params plugins.Params, httpServer *v1.HttpServer, httpserverReport *validationapi.HttpServerReport) []*envoy_extensions_filters_network_http_connection_manager_v3.HttpFilter  为 hcm 计算出 httpfilterchain (核心算法); 根据插件的配置，进行计算（根据prior值进行排序，并生成一系列 httpfilter）
				>>>>> conputeFilterChainWithoutSSL(server Server, reports Reports) FilterChain 为没有 ssl 的 server 计算 FC
					>>>>>> 复用以上代码
------------------------------------------------------------
      filters:
      # The HTTP connection manager is the only network filter.
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          use_remote_address: true
          http2_protocol_options:
            max_concurrent_streams: 100
          # File system based access logging.
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/var/log/envoy/access.log"
          # The route table, mapping /foo to some_service.
          route_config:    # route_config 是静态写法 rDS 写法为 rDS
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["acme.com"]
              routes:
              - match:
                  path: "/foo"
                route:
                  cluster: some_service
          # CustomFilter and the HTTP router filter are the HTTP filter chain.
          http_filters:
          # - name: some.customer.filter
          - name: envoy.filters.http.router
------------------------------------------------------------

------------------------------------------------------------
************************************************************
