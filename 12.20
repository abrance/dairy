> TODO
	>> 等福林过来解决部署证书的事情
	>> apiserver crd 进行更深层的开发
	>> apiserver 搭建文档
	>> apiserver 问题的总结

> 初始化k8s配置
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

client-go必须使用go 1.17以上
> https://github.com/clarketm/json/issues/5
> go1.16版本报错 encode.go:1260:12: sf.IsExported undefined (type reflect.StructField has no field or method IsExported)

> go 项目初始化
	>> go mod init xiaoy.io/$module_name
	>> go mod tidy
  >> go mod vendor 导入到vendor，项目可以识别
	>> go mod download $module_name # 在需要的时候安装module

> apiserver
	>> kube-apiserver 提供三种HTTP server 服务APIExtensionsServer、KubeAPIServer、AggregatorServer
	>> 组件
		>>> APIExtensionsServer：API扩展服务（扩展器）。该服务提供了CRD（CustomResourceDefinitions）自定义资源服务，开发者可通过CRD对Kubernetes资源进行扩展，例如，通过crd-example扩展Kubernetes资源。该服务通过CustomResourceDefinitions对象进行管理，并通过extensionsapiserver.Scheme资源注册表管理CRD相关资源。
		>>> AggregatorServer：API聚合服务（聚合器）。该服务提供了AA（APIAggregator）聚合服务，开发者可通过AA对Kubernetes聚合服务进行扩展，例如，metrics-server是Kubernetes系统集群的核心监控数据的聚合器，它是AggregatorServer服务的扩展实现。API聚合服务通过APIAggregator对象进行管理，并通过aggregatorscheme.Scheme资源注册表管理AA相关资源。
		>>> KubeAPIServer：API核心服务。该服务提供了Kubernetes内置核心资源服务，不允许开发者随意更改相关资源，例如，Pod、Service等内置核心资源会由Kubernetes官方维护。API核心服务通过Master对象进行管理，并通过legacyscheme.Scheme资源注册表管理Master相关资源
	>> 架构
	>> 补充
		>>> 三个组件底层依赖 GenericAPIServer，通过GenericAPIServer可以将Kubernetes资源与REST API进行映射
		>>> APIExtensionsServer扩展服务和AggregatorServer聚合服务都是可以在不修改Kubernetes核心代码的前提下扩展Kubernetes API的方式。只有KubeAPIServer核心服务是Kubernetes系统运行的基础，不建议随意修改它

> controller
	>> controller 是指与apiserver进行交互的扩展程序（分两种，k8s原生controller，自定义controller）
	>> 自定义controller
		>>> 架构
------------------------------------------------------------
          ┌──────────────┐
          │kube-apiserver│
          └─────────┬────┘
              ▲     │
┌─────────────┼─────┼─────────────────┐
│             │     ▼                 │
│         ┌───┴──────────┐            │
│         │  http-client │            │
│         └─────────┬────┘            │
│             ▲     │                 │
│             │     ▼                 │
│         ┌───┴──────────┐            │
│         │ application  │            │
│         └──────────────┘            │
│                          Controller │
└─────────────────────────────────────┘
application    业务应用
------------------------------------------------------------
	>> 问题
		>>> apiserver需要处理多个 controller 的请求，需要通过一些机制优化
	>> list-watch

> apiserver 启动顺序
	>>
	资源注册
	Cobra命令行参数解析
	创建APIServer通用配置
	创建APIExtensionsServer
	创建KubeAPIServer
	创建AggregatorServer
	创建GenericAPIServer
	启动HTTP服务
	启动HTTPS服务

> 自定义APIExtensionsServer
	>> 资源注册
	>> 创建apiserver 配置
	>> 创建apiextensionsserver 

	>> 
	创建GenericAPIServer。
	实例化CustomResourceDefinitions。
	实例化APIGroupInfo，将资源版本、资源、资源存储对象进行相互映射。
	InstallAPIGroup注册APIGroup（apiextensions.k8s.io）

> docker etcd 查看接口数据
	>> docker ps 查看etcd的container_id 号
	>> docker exec -it $id /bin/sh
	>> export ETCDCTL_API=3   # 设置etcdctl api版本，不同版本命令不同，默认是版本2，更麻烦
	>> ps -elf| grep etcd     # 查看集群的ip和端口号，作为endpoints；查看证书文件，作为认证参数
  --cacert=""                verify certificates of TLS-enabled secure servers using this CA bundle
  --cert=""                    identify secure client using this TLS certificate file
  --key=""                    identify secure client using this TLS key file
  --endpoints=[127.0.0.1:2379]        gRPC endpoints
	>> docker cp 到本地
	>> etcdctl --endpoints=127.0.0.1:2379 get / --prefix --keys-only --cacert="/ca.crt" --cert="/peer.crt" --key="/peer.key"   # 列出所有的key
	>> alias ectl='etcdctl --endpoints=127.0.0.1:2379 --cacert="/ca.crt" --cert="/peer.crt" --key="/peer.key"'  # 设置别名，不然每次命令都要输入证书参数
	>> etcdctl member list
	>> -w table/fields/json 等
		>>> e.g.  ectl get /registry/namespaces/default -w fields             # 查看其中一个键值对

> etcdctl -h
	>> 查看帮助

> CentOS7设置笔记本合盖不休眠
	>> /etc/systemd/logind.conf
	>>
	HandlePowerKey 按下电源键后的行为，默认power off
	HandleSleepKey 按下挂起键后的行为，默认suspend
	HandleHibernateKey 按下休眠键后的行为，默认hibernate
	HandleLidSwitch 合上笔记本盖后的行为，默认suspend

	ignore 忽略，跳过
	power off 关机
	eboot 重启
	halt 挂起
	suspend shell内建指令，可暂停目前正在执行的shell。若要恢复，则必须使用SIGCONT信息。所有的进程都会暂停，但不是消失（halt是进程关闭）
	hibernate 让笔记本进入休眠状态
	hybrid-sleep 混合睡眠，主要是为台式机设计的，是睡眠和休眠的结合体，当你选择Hybird时，系统会像休眠一样把内存里的数据从头到尾复制到硬盘里 ，然后进入睡眠状态，即内存和CPU还是活动的，其他设置不活动，这样你想用电脑时就可以快速恢复到之前的状态了，笔记本一般不用这个功能。
	lock 仅锁屏，计算机继续工作。

	systemctl restart systemd-logind

