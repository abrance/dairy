TODO
> 超融合架构, ceph, 虚拟化
> pandas, numpy
> nginx

> 算法
> 遇到的问题

> TCP/IP
  >> ARP 协议
  >> ICMP协议
  >> IP分片
		>>> 最大传输单元MTU（Maximum Transmission Unit，MTU），是指网络能够传输的最大数据包大小
		>>> 当IP数据报的长度超过帧的MTU时，它将被分片传输。分片可能发生在发送端，也可能发生在中转路由器上，而且可能在传输过程中被多次分片，但只有在最终的目标机器上，这些分片才会被内核中的IP模块重新组装。IP头部中的如下三个字段给IP的分片和重组提供了足够的信息：数据报标识、标志和片偏移。一个IP数据报的每个分片都具有自己的IP头部，它们具有相同的标识值，但具有不同的片偏移。并且除了最后一个分片外，其他分片都将设置MF标志。此外，每个分片的IP头部的总长度字段将被设置为该分片的长度。以太网帧的MTU是1500字节（可以通过ifconfig命令或者netstat命令查看），因此它携带的IP数据报的数据部分最多是1480字节（IP头部占用20字节）。考虑用IP数据报封装一个长度为1481字节的ICMP报文（包括8字节的ICMP头部，所以其数据部分长度为1473字节），则该数据报在使用以太网帧传输时必须被分片

/*
                           IP datagram(1501B)

                                ICMP 1481B

            |  20B      |   8B         |        1473B          |
            +-----------+--------------+-----------------------+
            |IP header  |  ICMP header |   ICMP payload(1473B) |
            +-----------+----+---------+----------------+-----++
                             |                          |     |
                             |                                |
                             |                                |
                             |                                |
                             v                                v
+------------+-------------+-------------+            +-----------+--------------+
|  IP header | ICMP header | ICMP payload|            | IP header | ICMP payload |
+------------+-------------+-------------+            +-----------+--------------+
| 20 B          8 B           1472B      |            |   20B           1B       |

             IP piece 1500B                                 IP piece 21B
 */
		>>> 最后，IP层传递给数据链路层的数据可能是一个完整的IP数据报，也可能是一个IP分片，它们统称为IP分组（packet）。本书如无特殊声明，不区分IP数据报和IP分组

	>> 单播广播与组播
		>>> TCP协议的这种连接是一对一的，所以基于广播和多播（目标是多个主机地址）的应用程序不能使用TCP服务。而无连接协议UDP则非常适合于广播和多播

	>> IGMP
		>>> 通过IGMP报文的交互在主机间建立组播通信，实现组成员管理功能
		>>> IGMP通过在接收者主机和组播路由器之间交互IGMP报文实现组成员管理功能，IGMP报文封装在IP报文中。
		
	>> TCP半关闭
		>>> 指关闭连接，但是并未关闭socket。调用了shutdown而非close，好处是当重新建立连接时更快，坏处是保留了socket文件，占用了内存。
		>>> TCP连接是全双工的，所以它允许两个方向的数据传输被独立关闭。换言之，通信的一端可以发送结束报文段给对方，告诉它本端已经完成了数据的发送，但允许继续接收来自对方的数据，直到对方也发送结束报文段以关闭连接。TCP连接的这种状态称为半关闭（half close）状态
		>>> 服务器和客户端应用程序判断对方是否已经关闭连接的方法是：read系统调用返回0（收到结束报文段）。当然，Linux还提供其他检测连接是否被对方关闭的方法，这将在后续章节讨论。socket网络编程接口通过shutdown函数提供了对半关闭的支持，我们将在后续章节讨论它。这里强调一下，虽然我们介绍了半关闭状态，但是使用半关闭的应用程序很少见

ICMP
> 网络层另外一个重要的协议是ICMP协议（Internet  Control  Message  Protocol，因特网控制报文协议）。
它是IP协议的重要补充，主要用于检测网络连接。ICMP协议使用的报文格式如图1-2所示。

rfc: https://www.rfc-editor.org/rfc/rfc792.html
Destination Unreachable Message

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Type      |     Code      |          Checksum             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     datagram, depending on type               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
8位类型字段用于区分报文类型。它将ICMP报文分为两大类：一类是差错报文，这类报文主要用来回应网络错误，比如目标不可到达（类型值为3）和重定向（类型值为5）；另一类是查询报文，这类报文用来查询网络信息，比如ping程序就是使用ICMP报文查看目标是否可到达（类型值为8）的。有的ICMP报文还使用8位代码字段来进一步细分不同的条件。比如重定向报文使用代码值0表示对网络重定向，代码值1表示对主机重定向。ICMP报文使用16位校验和字段对整个报文（包括头部和内容部分）进行循环冗余校验（Cyclic  Redundancy  Check，CRC），以检验报文在传输过程中是否损坏。不同的ICMP报文类型具有不同的正文内容。我们将在第2章详细讨论主机重定向报文，其他ICMP报文格式请参考ICMP协议的标准文档RFC 792。
需要指出的是，ICMP协议并非严格意义上的网络层协议，因为它使用处于同一层的IP协议提供的服务（一般来说，上层协议使用下层协议提供的服务）


arp高速缓存的查看与修改
> 《linux高性能服务器编程》
> arp 命令实现
	>> arp -a 查看；第一项描述为连接的机器。第二项为路由器。
	>> arp -d 删除一个arp缓存项
	>> arp -s 添加一个arp缓存项
	

garp实现
************************************************************
garp python
------------------------------------------------------------
#!/usr/bin/python

import binascii
import sys
import optparse
from socket import (socket,
                    AF_PACKET,
                    SOCK_RAW)


bcast_mac  = "\xff\xff\xff\xff\xff\xff"

ether_type = "\x08\x06"
hw_type    = "\x00\x01"
prot_type  = "\x08\x00"
hw_len     = "\x06"
prot_len   = "\x04"
op_code    = "\x00\x01"


def main():
    usage = "usage: %prog [options] arg1 arg2"

    parser = optparse.OptionParser(usage=usage)
    parser.add_option("-i", "--interface", type="string", dest="interface", help="Interface list to send packets, seperated by ','",metavar="intfName")
    parser.add_option('-m', "--src_mac", type="string", dest="src_mac", help="src mac address", metavar="srcMac")
    parser.add_option("-p", "--src_ip", type="string", dest="src_ip", help="src ip address", metavar="srcIp")
    (options, args) = parser.parse_args()

    if options.interface is None:
        print >> sys.stderr, "Need to specify the interface to send GARP"
        parser.print_help()
        sys.exit(1)

    if options.src_mac is None:
        print >> sys.stderr, "Need to specify the source mac in GARP packet"
        parser.print_help()
        sys.exit(1)

    if options.src_ip is None:
        print >> sys.stderr, "Need to specify the source ip in GARP packet"
        parser.print_help()
        sys.exit(1)

    intf = options.interface.split(',')[0]
    print >> sys.stderr, intf

    src_mac_hexstr = options.src_mac.replace(':', '')
    print >> sys.stderr, "src MAC: %s" % (src_mac_hexstr)
    src_mac = binascii.unhexlify(src_mac_hexstr)

    src_ip = ''
    for ip_subsec in options.src_ip.split('.'):
        print >> sys.stderr, "src IP: %s" % (ip_subsec)
        src_ip += binascii.unhexlify(format(int(ip_subsec), '02x'))

    try:
        sckt = socket(AF_PACKET, SOCK_RAW)
    except:
        print("unable to create socket. Check your permissions")
        sys.exit(1)

    sckt.bind((intf, 0))

    pkt = bcast_mac + src_mac + ether_type + hw_type + prot_type + hw_len + prot_len + op_code + src_mac + src_ip + bcast_mac + src_ip
    while 1:
        sckt.send(pkt)


if __name__ == "__main__":
    main()
------------------------------------------------------------
************************************************************
