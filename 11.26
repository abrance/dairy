
git本地仓库推送到远程仓库
> 本地有完整代码，远程只有部分代码
> # git remote add origin ssh://服务器名@服务器IP地址/仓库路径  命令关联到远程仓库，但是一般已经有了origin分支，所以执行报错
> git remote rm origin 删除origin，然后执行 git remote add origin
> 然后commit push即可本地推送到远程（git push origin master）

veth pair
> veth是虚拟以太网卡（Virtual Ethernet）的缩写。veth设备总是成对的，因此我们称之为veth pair。veth pair一端发送的数据会在另外一端接收，非常像Linux的双向管道。根据这一特性，veth pair常被用于跨network namespace之间的通信，即分别将veth pair的两端放在不同的namespace里
> 仅有veth pair设备，容器是无法访问外部网络的。为什么呢？因为从容器发出的数据包，实际上是直接进了veth pair设备的协议栈。如果容器需要访问网络，则需要使用网桥等技术将veth pair设备接收的数据包通过某种方式转发出去
> 网卡就像网线两端，一定是成对的，物理网卡也通过网线连接另一个网络的设备。虚拟网卡也是如此。
> 我们要学习的经典容器组网模型就是veth pair+bridge的模式。容器中的eth0实际上和外面host上的某个veth是成对的（pair）关系，那么，有没有办法知道host上的vethxxx和哪个container eth0是成对的关系呢

> k8s list-watch机制和informer 模块
	>> https://zhuanlan.zhihu.com/p/59660536
	>> k8s 内部要保证消息的实时性也要兼顾性能，使用了list-watch 机制
	>> List-watch机制
		>>> k8s组件间仅采用http方式通信
		>>> etcd 作为存储，apiserver使统一入口。具体有两种类型的接口，list和watch。list为list API罗列资源，基于http短连接实现；watch使调用资源监听资源update事件，基于长连接实现。
			>>>> 如list api形式为GET /api/v1/pods, watch api 形式为 GET /api/v1/watch/pods watch=true
		>>> K8S的informer模块封装list-watch API，用户只需要指定资源，编写事件处理函数，AddFunc,UpdateFunc和DeleteFunc等。如下图所示，informer首先通过list API罗列资源，然后调用watch API监听资源的变更事件，并将结果放入到一个FIFO 队列，队列的另一头有协程从中取出事件，并调用对应的注册函数处理事件。Informer还维护了一个只读的Map Store缓存，主要为了提升查询的效率，降低apiserver的负载
		>>> watch实现
			>>>> 秘诀就是Chunked transfer encoding(分块传输编码), 当客户端调用watch API时，apiserver 在response的HTTP Header中设置Transfer-Encoding的值为chunked，表示采用分块传输编码，客户端收到该信息后，便和服务端该链接，并等待下一个数据块，即资源的事件信息
	>> k8s保证了
	消息可靠性
		>>> list和watch一起保证了消息的可靠性，避免因消息丢失而造成状态不一致场景。具体而言，list API可以查询当前的资源及其对应的状态(即期望的状态)，客户端通过拿期望的状态和实际的状态进行对比，纠正状态不一致的资源。Watch API和apiserver保持一个长链接，接收资源的状态变更事件并做相应处理。如果仅调用watch API，若某个时间点连接中断，就有可能导致消息丢失，所以需要通过list API解决消息丢失的问题。从另一个角度出发，我们可以认为list API获取全量数据，watch API获取增量数据。虽然仅仅通过轮询list API，也能达到同步资源状态的效果，但是存在开销大，实时性不足的问题
	消息实时性
		>>> list-watch机制下，每当apiserver的资源产生状态变更事件，都会将事件及时的推送给客户端，从而保证了消息的实时性
	消息顺序性
		>>> 在K8S在每个资源的事件中都带一个resourceVersion的标签，这个标签是递增的数字，所以当客户端并发处理同一个资源的事件时，它就可以对比resourceVersion来保证最终的状态和最新的事件所期望的状态保持一致
	高性能
		>>> watch作为异步消息通知机制，复用一条长链接，保证实时性的同时也保证了性能
	

> 设计一个优秀的异步消息系统
	>> 需要
	消息可靠性
	消息实时性
	消息顺序性
	高性能

> k8s核心原理 APIServer
	>> https://www.jianshu.com/p/a25e9e613f2c

NAS安装
> https://post.smzdm.com/p/aqx07xmk/

周汇报
> dpdk
	>> https://app.yinxiang.com/fx/1602ba51-c639-4287-9c21-0cea6bf2473b
> jumpserver
	>> jumpserver部署文档和部署脚本创建了仓库进行开发和维护
		>>> http://192.192.100.33:9000/dengtianxiang/jp-installer/
	>> 熟悉代码
	>> 对jumpserver已出现的问题给出了解决方案
		>>> https://app.yinxiang.com/fx/1a8c1d07-ea4c-443b-a431-00ea21c36d4e
	>> jumpserver 整合到海恩给出两个方案
		>>> OC请求接口后跳转到终端的链接进行操作即可
		>>> 让客户将OB配置可信的证书，可以直接在OC中进行操作
> envoy
	>> 是什么
	>> 云原生时代的流量入口：Envoy Gateway - 云+社区 - 腾讯云 (tencent.com)
    >> 是专为大型现代 SOA（面向服务架构）架构设计的 L7 代理和通信总线
    >> 理念： 网络对应用程序来说应该是透明（？什么透明的）的。当网络和应用程序出现问题时，应该很容易确定问题的根源    
	>> 优势
			>>> 负载均衡器
					>>>> https://zhuanlan.zhihu.com/p/53438208    L7负载均衡
			>>> 服务发现系统
			>>> HTTP2的支持，更多协议
			>>> 自定义插件，更灵活
			>>> 服务治理，支持健康检查、熔断、限流、超时、重试、故障注入
> k8s
	>> APIServer
		>>> list-watch机制研究

