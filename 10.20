
> mc-agent 配置重点
	>> public-key
	>> mix-service
		 >>> service-id 服务id
		 >>> host
		 >>> port
	>> openssl-root-crt  ca.crt文件路径
	>> local-dirs 
		 >>> name 监控路径
		 >>> scan-dir-depth 扫描深度
	>> webserver agent与portal通信的http服务
		 >>> host port mc-agent 的ip port
		 >>> path   需要配置为 /ws
	>> kafka-servers  kafka节点
	>> license
		 >>> license-file      license.ca    文件路径
		 >>> privatekey-file   privatekey.ca 文件路径
	>> migrate-policy 迁移策略
		 >> enable

> mc-notify配置重点
	>> notification server按教程填写
	>> filters
		>>> batch-send-interval-min  指定信息发送频率
		>>> send-channel          发送方式
	>> url	db地址
	>> license
		 >>> license-file      license.ca    文件路径
		 >>> privatekey-file   privatekey.ca 文件路径

> kafka
	>> 消息系统
		 >>> 适用场景：活动流数据（对写入日志进行统计分析，页面访问量）、运营数据（服务器性能数据）
		 >>> 分布式，基于发布/订阅的消息系统
		 		 >>>> 设计目标
				 			>>>>> 时间复杂度为O(1) 的消息持久化能力
							>>>>> 高吞吐率
							>>>>> 支持kafka server间消息分区，分布式消费，保证每个分区内的消息顺序传输
							>>>>> 支持离线和实时数据处理
							>>>>> 支持在线水平扩展
							
> mail, wechat, dingding的配置
	>> qlsibiswozwvhaba smtp授权码

> 查看集群运行状态
	>> xcall jps           # xcall 为脚本 jps为jdk/bin/jps链接
************************************************************
xcall脚本
------------------------------------------------------------
#!/bin/bash
pcount=$#
if(( pcount==0 ));
then
        echo no args;
        exit;

fi
user=`whoami`
#根据情况修改kafka 集群节点
for i in aymgr100.com aymgr101.com aymgr102.com
do
        echo -------------aymgr.com----------
        ssh $user@$i "source /etc/profile;$@"
done
------------------------------------------------------------
************************************************************

> 船长
	>> 7-12
		 10 白条正上Q方
		 >>> 一人 AQ
		 >>> 二人 A 
	>> 13
		 >>> 一人 A

学习一门编程语言
> https://www.cnblogs.com/qiaogaojian/p/6781908.html
> 怎么运行一个简单的该语言程序
> 了解该语言的
	>> 基本数据类型
	>> 基本语法和流程控制,判断/分支/循环等
	>> 主要数学运算符
	>> print函数的使用
> 掌握
	>> 数组和其他集合类的使用
	>> 有基础的话可以理解一下泛型，如果理解不了也问题不大，后面可以补；
> 简单字符串处理
	>> 所谓简单，就是Regex和Parser以下的内容，什么查找替换，截断去字串之类的。不过这个阶段有一个难点，就是字符编码问题。如果理解不了，可以先跳过，否则的话最好在这时候把这个问题搞定，免留后患；
> 基本面向对象或者函数式编程的特征
	>> 继承
	>> 多态
	>> Lambda函数之类的
> 异常、错误处理、断言、日志和调试支持，对单元测试的支持
	>> 你不一定要用TDD，但是在这个时候应该掌握在这个语言里做TDD的基本技能
> 程序代码和可执行代码的
	>> 组织机制
	>> 运行时模块加载
	>> 符号查找机制
> 基本输入输出和文件处理，输入输出流类的组织
	>> 清楚概念
> 该语言如何进行callback方法调用，如何支持事件驱动编程模型
	>> 对设计思路有帮助
> 序列化和反序列化
	>> 缺省机制
> 动态编程，反射和元数据编程，数据和程序之间的相互转化机制，运行时编译和执行的机制
	>> ?
11. 如果有必要
可了解一下线程、并发和异步调用机制，主要是为了读懂别人的代码，如果自己要写这类代码，必须专门花时间严肃认真系统地学习，严禁半桶水上阵；
12. 如果有必要
可在这时研究regex和XML处理问题，如无必要可跳过；
13. 如果有必要
可研究一下该语言对于泛型的支持，不必花太多时间，只要能使用现成的泛型集合和泛型函数就可以了，可在以后闲暇时抽时间系统学习。
需要注意的是，泛型技术跟多线程技术一样，用不好就成为万恶之源，必须系统学习，谨慎使用，否则不如不学不用；
14. 如果还有时间
最好咨询一下有经验的人，看看这个语言较常用的特色features是什么，如果之前没学过，应当补一下。比如
Ruby的block interator,
Java的dynamic proxy，
C# 3的LINQ和extension method。
没时间的话，我认为也可以边做边学，没有大问题。
15. 在工作的闲暇时间，可以着重考察两个问题，
第一，这个语言有哪些惯用法和模式，
第二，这个语言的编译/解释执行机制。
至此语言的基本部分就可以说掌握了，之后是做数据库、网络还是做图形，可以根据具体需求去搞，找相应的成熟框架或库，边做边学，加深理解。


> 使用qq邮箱smtp邮件自动发送
	>> https://www.ujcms.com/documentation/351.html
> 钉钉自动推送信息
	>> https://m.dingtalk.com/qidian/help-detail-20781541
> Wechat自动推送
	>> https://qydev.weixin.qq.com/wiki/index.php?spm=a2c4e.10696291.0.0.280019a4nAZK6i&title=%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8
