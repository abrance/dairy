> 将组装为 proxy 对象时 细节整理，维护 插件全局map。插件该如何管理，当重启时如何保证加载？

> 问题
	>> gateway 这一层的校验并没有 去验证是否可以生成 xDSSnapshot
	  当 proxy 生成后，如果 gloo 生成xDSSnapshot 时出错（我们团队对envoy的了解不够细，导致了转换成envoy某些配置冲突，从而不能生成xDSSnapshot），怎么办？这时，gloo 这一层对象不受影响，envoy不受影响，但 gateway 受影响。
	>> 注意： 生成插件实例时没有对插件配置进行任何校验，当绑定 VS 时才进行插件配置校验，如果校验不通过，这个插件实例几乎是无用状态



> dam translatorSyncer Sync(ctx context.Context, snap *v1.ApiSnapshot) error
	>> 链接
		https://www.mubucm.com/doc/4RCH5x-v8YS
	>> 概述
		将监听的资源生成xDS对象
	>> 结构
		>>> syncEnvoy(ctx context.Context, snap *v1.ApiSnapshot, allReports reporter.ResourceReports) error  proxy生成 xDSSnapshot（这里将 snap 中的Proxy拆出来，ctx和snap作为param传进去）
			>>>> translatorFactory Translate(params Params, proxy Proxy) (Snapshot, ResouceReports, ProxyReport, error) 生成一个 translatorInstance 来获取 proxy -> xDSSnapshot
				>>>>> translatorInstance Translate(params Params, proxy Proxy) (envoycache.Snapshot, reporter.ResourceReports, ProxyReport, error) 根据 proxy 生成 xDSSnapshot
					>>>>>> createUpstreamToEndpointsMap(upstreams []Upstream, endpoints []Endpoint) map[string][]Endpoint  通过遍历upstream endpoint ，同一upstream 下的 eDS作为eDSList作为值保存，map upstreamName: eDSList
					>>>>>> computeClusters(params Params, report ResourceReports, upstreamRefKeyToEndpoints map[string][]Endpoint, proxy Proxy) []*Cluster 遍历ClusterList，cluster->envoyCluster
						>>>>>>> validateUpstreamLambdaFunctions(proxy Proxy, upstreams UpstreamList, upstreamGroups UpstreamGroupList, reports ResourceReports)
							>>>>>>>> validateRouteDestinationForValidLambdas(proxy Proxy, route Route, upstreamGroup UpstreamGroupList, reports ResourceReports, upstreamLambdas map[string]map[string]bool)  
								RouteAction_Single Destination 添加到 DestList
								RouteAction_Multi DestinationList 遍历后 添加到 DestList
								RouteAction_UpstreamGroup 校验 Route 的 UpstreamGroupRef是否真实存在，再将 upstreamGroup 遍历后 添加到 DestList
								UpstreamToClusterName(upstream *core.ResourceRef) string  拼接upstream Name和 Namespace
						>>>>>>> computeCluster(params Params, upstream Upstream, upstreamRefKeyToEndpoints Endpoint, reports ResourceReports) Cluster  组装 HC OD 熔断 LB ConnectTimeout Http2Opt SslConfig TransportSocket EDS 为 Cluster；并进行Cluster 的校验
							>>>>>>>> initializeCluster(upstream Upstream, upstreamRefkeytoendpoints Endpoint, report ResourceReports, secrets SecretList) Cluster 组装 HC OD 熔断 LB ConnectTimeout Http2Opt SslConfig TransportSocket EDS 为 Cluster
								>>>>>>>>> createHealthCheckConfig(upstream Upstream, secrets SecretList) (HealthCheck, error)  校验 hc HealthyThreshold UnhealthyThreshold HealthChecker 没有则报错；HC->envoyHC 转换
									ToEnvoyHealthCheck(check HealthCheck, secrets SecretList) (HealthCheck, error) HealthCheck 转换为 envoyHC
								>>>>>>>>> createOutlierDetectionConfig(upstream Upstream) (OutlierDetection, error)  校验OutlierDetection.HealthChecker.Interval 参数；OD->envoyOD转换
								>>>>>>>>> applyDefaultsToUpstreamSslConfig(sslConfig *v1.UpstreamSslConfig, options *v1.UpstreamOptions)  设置默认的UpstreamSslConfig
								>>>>>>>>> ResolveUpstreamSslConfig(secrets SecretList, uc UpstreamSslConfig) (UpstreamTlsContext, error)  组装commonTlsContext和sni为 upstreamTlsContext
									ResolveCommonSslConfig(cs CertSource, secrets v1.SecretList, mustHaveCert bool) (*envoyauth.CommonTlsContext, error) 组装 commonTlsContext
								>>>>>>>>> SetEdsOnCluster(out Cluster, settings Settings) 将 EDS 的配置组装到 Cluster
							>>>>>>>> validateCluster(c Cluster) error  校验 Cluster 的类型是否为 STATIC STRICT_DNS LOGICAL_DNS，校验 Cluster 是否包含 Endpoint
					>>>>>> computeClusterEndpoints(params Params, upstreamRefKeyToEndpoints map[string][]*Endpoint, reports ResourceReports) ClusterLoadAssignment 将endpoint组装cDS 的 LoadAssignments
						>>>>>>> loadAssignmentForUpstream(upstream Upstream, clusterEndpoints Endpoint) ClusterLoadAssignment  一个upstream下的endpointList进行遍历 组装Endpoint 的HC LB Hostname， 组装LocalityLbEndpoints 作为cDS的配置
					>>>>>> computeListenerResources(params Params, proxy Proxy, listener Listener, listenerReport ListenerReport) listenerResouces  通过 listener 和 routeConfig 组装 listenerResources
						>>>>>>> computeRouteConfig(params Params, proxy Proxy, listener Listener, routeCfgName string, listenerReport ListenerReport) RouteConfiguration 校验listener中的ssl，通过VHList 组装为 RouteConfig
							>>>>>>>> computeVirtualHosts(params Params, proxy Proxy, listener Listener, httpListenerReport HttpListenerReport) VirtualHost 检验 VH；组装 VH 为 VHList
								ValidateVirtualHostDomains(virtualHosts []VirtualHost, httpListenerReport HttpListenerReport) 检验VH的domain 重复则异常
								computeVirtualHost(params VirtualHostParams, virtualHost VirtualHost, requireTls bool, bhostReport VirtualHostReport) VirtualHost 组装 VH 的 name domains routes requireTls
							>>>>>>>> validateListenerSslConfig(params Params, listener Listener) error 检验是否能正常组装为downstreamTlsContext ，遍历 listener 组装 commonTlsContext sni 为 downstreamTlsConstext，如果都能顺利组装则不报错
								>>>>>>>>> ResolveDownstreamSslConfig(secrets v1.SecretList, dc *v1.SslConfig) (*envoyauth.DownstreamTlsContext, error) 组装 commonTlsContext sni 为 downstreamTlsConstext
									ResolveCommonSslConfig(cs CertSource, secrets v1.SecretList, mustHaveCert bool) (*envoyauth.CommonTlsContext, error) 组装 commonTlsContext
						>>>>>>>> computeListener(params Params, proxy Proxy, listener Listener, listenerReport ListenerReport) Listener 通过 address 组装 envoylistener
							computeFilterChainsFromSslConfig(snap ApiSnapshot, listener Listener, listenerReport ListenerReport) FilterChain 将 Proxy listener下的 server 列出，根据sni，组成一个 SecureFCList 返回
							FCList 和 listener 地址等参数 组装为 一个 envoy listener							
					>>>>>> 将 listenerResource 中的 RouteConfig listener 加入到 routeConfigList listenerList
					>>>>>> GeneratedResources(params Params, inClusters Cluster, inEndpoint ClusterLoadAssignment, inRouteConfigurations RouteConfiguration, inListeners Listener) ([]Cluster, []ClusterLoadAssignment, []RouteConfiguration, Listener, error)  使用插件（Gloo里的插件和我们的不同）再次对四种资源进行一些处理
				>>>>>> generateXDSSnapshot(cluster []Cluster, endpoints []ClusterLoadAssignment, routeConfigs []RouteConfiguration, listeners []Listener) Snapshot 将四种资源的版本（通过hash的值）和 资源组装为 envoySnapshot
					NewSnapshotFromResources(endpoints Resources, clusters Resources, routes Resource, listeners Resources) Snapshot 根据四种资源组装 envoySnapshot
						downgradeCacheResources(resources Resources) Resources 兼容 envoy v2资源
						


> 转换设计文档
  >> 概述
    dam项目目前由两个子项目组成，gateway子项目和 dam 子项目，(为了区分 gateway子项目和项目中的 gateway对象，将gateway对象称为GW 对象)。gateway 负责 GW VS 对象的管理，dam 负责upstream endpoint 对象的管理。gateway 将 GW VS Route 对象转为 Proxy对象，dam 将 Proxy upstream Endpoint 对象转换为 xDSSnapshot 对象。
  >> 思路
    dam 基于 gloo 1.7 版本进行二次开发而来，对比 dam 子项目 和 gloo 子项目，upstream endpoint 对象没有发生变化，而gateway 子项目中 GW VS 对象发生了很大的变化（proxy对象没有发生变化，因为proxy对应的是envoy配置xDS协议有关）。通过分析可以认识到，dam和 gloo层的对象转换没有发生任何变化；然而gateway 这一层中转换为 Proxy 时，发生了比较大的变化，虽然如此，在这一层的转换过程中，应该参照之前的流程实现转换逻辑，做到大范围的代码复用，快速开发以实现需求，这是dam 转换需求的实现思路。
  >> 准备工作
    >>> gloo GW(VS) -> PROXY 具体转换流程
      gloo Proxy 生成过程：https://www.mubucm.com/doc/2sFXlYerCIC
      
      -- ** 将同一proxyName的GW组成一个proxy:GWList a的map
      遍历 map，拿到同一个ProxyName下的GWList 
      根据namespace过滤 GWList
      ** 验证 gateway 中 http 类型 gateway 中的 VS 是否真实存在，验证是否有重复地址的 gateway，异常则丢弃
      ** 遍历GWList，获取GW，然后遍历 snap 里的 VSList，如果GW 里存在就添加到 VSForGWList
      ** 验证 VSForGWList VS domain，如果重复，则报异常
      如果 VS 的 oneWayTls没配，加上全局默认配置的 oneWayTls      
      ** 通过VS组装 VH 对象，把 VHList 和 sslConfig 组装到 listener 中
      ListenerList 组装成 Proxy
      
    >>> gloo Proxy -> xDSsnapshot
      gloo xDSsnapshot 生成过程 https://www.mubucm.com/doc/1cTTAfMIFWS

  >> 流程
    >>> gateway 生成 proxy 对象
      https://www.mubucm.com/doc/43879ZUV63S
    >>> dam  生成xDSsnapshot 对象
      https://www.mubucm.com/doc/4RCH5x-v8YS      


> 服务器配置
	>> 要求 ip地址连号
	>> 1台 gitlab 服务器和文件服务器  centos7 内存 16G CPU 4核 磁盘 100G，带宽越大越好
	>> 5台 开发服务器 centos7 CPU 4核 内存8G 磁盘50G
